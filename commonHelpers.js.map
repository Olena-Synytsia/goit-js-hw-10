{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst datetimePicker = document.getElementById('#datetime-picker');\nconst btnStart = document.querySelector('button');\nconst secondsElement = document.querySelector('span.value[data-seconds]');\nconst minutesElement = document.querySelector('span.value[data-minutes]');\nconst hoursElement = document.querySelector('span.value[data-hours]');\nconst daysElement = document.querySelector('span.value[data-days]');\n\nlet userSelectedDate = 0;\n\nconsole.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\nconsole.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\nconsole.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n\nconst options = {\n  enableTime: true,\n  dateFormat: 'Y-m-d H:i',\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n\n    if (userSelectedDate < new Date()) {\n      btnStart.disabled = true;\n      iziToast.error({\n        position: 'topRight',\n        messageColor: 'white',\n        backgroundColor: 'red',\n        message: 'Please choose a date in the future',\n      });\n    } else {\n      btnStart.disabled = false;\n    }\n  },\n};\n\nflatpickr('#datetime-picker', options);\nbtnStart.addEventListener('click', timerStart);\n\nfunction timerStart() {\n  btnStart.disabled = true;\n  datetimePicker.disabled = true;\n  startCountdown();\n}\n\nfunction startCountdown() {\n  const timerInterval = setInterval(() => {\n    const timeLeft = getTimeDifference(userSelectedDate);\n\n    updateTimerDisplay(timeLeft);\n\n    if (timeLeft.total <= 0) {\n      clearInterval(timerInterval);\n      updateTimerDisplay({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n    }\n  }, 1000);\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["datetimePicker","btnStart","userSelectedDate","convertMs","options","selectedDates","iziToast","flatpickr","timerStart","startCountdown","timerInterval","timeLeft","ms","days","hours","minutes","seconds"],"mappings":"+IAMA,MAAMA,EAAiB,SAAS,eAAe,kBAAkB,EAC3DC,EAAW,SAAS,cAAc,QAAQ,EACzB,SAAS,cAAc,0BAA0B,EACjD,SAAS,cAAc,0BAA0B,EACnD,SAAS,cAAc,wBAAwB,EAChD,SAAS,cAAc,uBAAuB,EAElE,IAAIC,EAAmB,EAEvB,QAAQ,IAAIC,EAAU,GAAI,CAAC,EAC3B,QAAQ,IAAIA,EAAU,IAAM,CAAC,EAC7B,QAAQ,IAAIA,EAAU,MAAQ,CAAC,EAE/B,MAAMC,EAAU,CACd,WAAY,GACZ,WAAY,YACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBH,EAAmBG,EAAc,CAAC,EAE9BH,EAAmB,IAAI,MACzBD,EAAS,SAAW,GACpBK,EAAS,MAAM,CACb,SAAU,WACV,aAAc,QACd,gBAAiB,MACjB,QAAS,oCACjB,CAAO,GAEDL,EAAS,SAAW,EAEvB,CACH,EAEAM,EAAU,mBAAoBH,CAAO,EACrCH,EAAS,iBAAiB,QAASO,CAAU,EAE7C,SAASA,GAAa,CACpBP,EAAS,SAAW,GACpBD,EAAe,SAAW,GAC1BS,GACF,CAEA,SAASA,GAAiB,CACxB,MAAMC,EAAgB,YAAY,IAAM,CACtC,MAAMC,EAAW,kBAAkBT,CAAgB,EAEnD,mBAAmBS,CAAQ,EAEvBA,EAAS,OAAS,IACpB,cAAcD,CAAa,EAC3B,mBAAmB,CAAE,KAAM,EAAG,MAAO,EAAG,QAAS,EAAG,QAAS,CAAC,CAAE,EAEnE,EAAE,GAAI,CACT,CAEA,SAASP,EAAUS,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}